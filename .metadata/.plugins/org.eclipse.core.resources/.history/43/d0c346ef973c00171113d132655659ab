package il.ac.technion.cs.sd.book.app;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.google.inject.Inject;

import il.ac.technion.cs.sd.book.ext.LineStorageFactory;
import library.DoubleKeyDict;
import library.Pair;
import library.Triple;;

public class BookScoreInitializerImpl implements BookScoreInitializer {

	private DoubleKeyDict dict;
	private Map<Pair, String> tmpStore;
	private final String REVIEWER = "Reviewer";
	@Inject
	public BookScoreInitializerImpl(LineStorageFactory factory) {
		this(new DoubleKeyDict(factory));
		tmpStore = new HashMap<>();
	}

	public BookScoreInitializerImpl(DoubleKeyDict dict) {
		this.dict = dict;
		tmpStore = new HashMap<>();
	}

	@Override
	public void setup(String xmlData) {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;
		try {
			builder = factory.newDocumentBuilder();
			Document doc = builder.parse(new InputSource(new StringReader(xmlData)));
			NodeList reviewers = doc.getElementsByTagName(REVIEWER);
			for (int i = 0; i < reviewers.getLength(); i++) {
				Node nNode = reviewers.item(i);
				NodeList reviews = ((Element) nNode).getElementsByTagName("Review");
				String reviewerId = ((Element) nNode).getAttribute("Id");
				for (int j = 0; j < reviews.getLength(); j++) {
					String bookName = ((Element) nNode).getElementsByTagName("Id").item(j).getTextContent();
					String bookScore = ((Element) nNode).getElementsByTagName("Score").item(j).getTextContent();
					tmpStore.put(new Pair(reviewerId, bookName), bookScore);
				}
			}

			List<Triple> lst = tmpStore.entrySet().stream()
					.map(x -> new Triple(x.getKey().getKey(), x.getKey().getValue(), x.getValue()))
					.collect(Collectors.toList());
			// System.out.println(tmpStore);
			dict.addAndStore(lst);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
