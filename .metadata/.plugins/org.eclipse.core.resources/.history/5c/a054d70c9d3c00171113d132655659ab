package library;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import il.ac.technion.cs.sd.book.ext.LineStorage;
import library.DoubleKeyDict.IntegerWrapper;

public interface DoubleKeyDictInterface {
	/**
	 * adds a {@link Triple} to the {@link DoubleKeyDict}. Should only be called
	 * before a store operation Does not save the data persistently.
	 * 
	 * @param t
	 *            the {@link Triple} to be stored
	 */
	public void add(Triple t);

	/**
	 * adds {@link Triple}s to the {@link DoubleKeyDict}. Should only be called
	 * before a store operation Does not save the data persistently.
	 * 
	 * @param ts
	 *            the {@link Triple}s to be stored
	 */
	public void addAll(Collection<Triple> ts);

	/**
	 * Performs an {@link DoubleKeyDict#addAll(Collection)} operation, followed
	 * by a {@link DoubleKeyDict#store()}.
	 * 
	 * @param triples
	 *            the {@link Triple}s to be added
	 */
	public void addAndStore(Collection<Triple> ts) {
		addAll(ts);
		store();
	}

	/**
	 * Performs the persistent write using the {@link LineStorage}, and prevents
	 * further writes to the {@link DoubleKeyDict}
	 */
	public void store() {
		assert !initialized;
		initialized = true;
		final Map<String, List<Pair>> mainKeyToPair = new HashMap<>();
		final Map<String, List<Pair>> secondaryKeyToPair = new HashMap<>();
		triples.stream().forEach(element -> {
			addToMap(mainKeyToPair, element.getKey1(), new Pair(element.getKey2(), element.getValue()));
			addToMap(secondaryKeyToPair, element.getKey2(), new Pair(element.getKey1(), element.getValue()));
		});
		IntegerWrapper currentLine = new IntegerWrapper();
		storeDict(mainKeyMap, mainKeyToPair, currentLine);
		storeDict(secondaryKeyMap, secondaryKeyToPair, currentLine);
	}

	private void storeDict(final Dict dict, final Map<String, List<Pair>> m, IntegerWrapper currentLine) {
		m.keySet().stream().sorted().forEachOrdered(key -> {
			int startingLine = currentLine.val;
			m.get(key).stream().sorted().forEachOrdered(element -> {
				storer.appendLine(element.getKey());
				storer.appendLine(element.getValue());
				currentLine.val += 2;
			});
			dict.add(new Pair(key, startingLine + "," + currentLine));
		});
		dict.store();
	}

	private void addToMap(final Map<String, List<Pair>> m, String key, Pair value) {
		if (!m.containsKey(key))
			m.put(key, new ArrayList<>());
		m.get(key).add(value);
	}

	public List<Pair> findByMainKey(String key) throws InterruptedException {
		return findByKey(mainKeyMap, key);
	}

	public Optional<String> findByKeys(String key1, String key2) throws InterruptedException {
		Optional<String> o = mainKeyMap.find(key1);
		if (!o.isPresent())
			return Optional.empty();
		String[] lines = o.get().split(",");
		return BinarySearch.of(storer, key2, Integer.parseInt(lines[0]), Integer.parseInt(lines[1]));
	}

	public List<Pair> findBySecondaryKey(String key) throws InterruptedException {
		return findByKey(secondaryKeyMap, key);
	}

	private List<Pair> findByKey(Dict d, String key) throws InterruptedException {
		List<Pair> $ = new ArrayList<>();
		Optional<String> o = d.find(key);
		if (!o.isPresent())
			return $;
		String[] lines = o.get().split(",");
		int end = Integer.parseInt(lines[1]);
		for (int i = Integer.parseInt(lines[0]); i < end; i += 2)
			$.add(new Pair(storer.read(i), storer.read(i + 1)));
		return $;
	}
}
